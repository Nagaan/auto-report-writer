FEATURES FOR CURRENT SOLUTION

When outputting pen test reports, after the generation of the automated
report, ensure each pen test report is on a new page (for PDF/DOCX) to
create a clearer division in the pen test reports.

Introduce more details in the SCOPE sections of the summary based on the
pen test tools that have been detected. At the moment, we only list the
tools by name. We can leverage this to improve the SCOPE section based on
the general application of the tool.

Select an appropriate AI tool and train it to generate specific
RECOMMENDATIONS based on the name of detected vulnerabilities.

Split up the SUMMARY section so that the GRAPH can be repositioned when
needed.

Provide an alternate version of the GRAPH (PNG) that can then be appended
to the PDF/DOCX, as the current graph does not display when the HTML is
converted because it is generated by a JavaScript.

Create an interface that allows the user to import different report
templates (classes). This will allow the user to add more reporting
capabilities to the automated report writer, as it is only able to
recognise pen test tool outputs from configured pen test tools (pen test
tools with appropriate classes).

Create a standardised XSLT. At the moment each pen test tool that the
automated report writer processes requires its own individual XSLT so
that it can properly format its relevant XML to generate an HTML.
    OR
Complete the XSLT GENERATOR that we started.

Complete the TEMPLATE GENERATOR that we started. The template generator
was supposed to create pen testing tool classes depending on the
detected pen test tool outputs. This proved difficult as outputs differ
greatly, hence why an alternate solution (suggested below) was to use AI.

Move away from HTML? Research which is the best file format for XMLs to
be converted into.

Look into other Python MODULES that can replace the functionality of some
custom-made UTILS we have.

Replace most, or ideally all, CSS STYLING with a standardised CSS file
('common_styles.css'). At the moment a lot of the CSS styling is done
in-line within the relevant HTML templates which, although works,
requires a lot of unnecessary class restrictions.

Reimplement a ('message_utils.py') file that contains the various print
statements of the project files (not including error print statements).

FEATURES FOR AI SOLUTION

Train an AI to read Pen Test outputs and generate appropriate information
to fill in a standardised template ('vulnerability name', 'risk level',
'cvss_score', 'details'). This would be a lot more preferable to our
current solution as it should not require any custom report classes.